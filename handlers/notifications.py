# notifications.py

from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from logger.logging_settings import logger
from aiogram import Bot
from config_data import config

from service.CbRF import course_today

bot = Bot(token=config.BOT_TOKEN)

async def send_greeting(user_id, selected_data, day):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id."""
    try:
        if course_today(selected_data, day) == f"–î–∞–Ω–Ω—ã–µ –Ω–∞ {day} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã":
            logger.info(f"The daily newsletter will not be sent to user {user_id}. Data has been published on {day}")
        elif course_today(selected_data, day) != f"–î–∞–Ω–Ω—ã–µ –Ω–∞ {day} –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã":
            await bot.send_message(user_id, course_today(selected_data, day))
            logger.info(f"The daily newsletter has been sent to user {user_id}.")
    except Exception as e:
        logger.error(f"Error. The daily newsletter has been not sent: {e}")


def schedule_daily_greeting(user_id, scheduler, selected_data, day):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –≤ 7:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏."""
    job_id = f"daily_greeting_{user_id}"
    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return
    else:
            try:
                scheduler.add_job(
                    send_greeting,
                    CronTrigger(hour=7, minute=00, timezone='Europe/Moscow'),
                    args=[user_id, selected_data, day],
                    id=job_id
                )
                logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
            except Exception as e:
                logger.error(e)

def schedule_interval_greeting(user_id, scheduler, selected_data, day): # –î–æ–±–∞–≤–∏–ª–∏ scheduler –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É '–ü—Ä–∏–≤–µ—Ç!' –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥."""
    job_id = f"interval_greeting_{user_id}"
    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return
    else:
        try:
            scheduler.add_job(send_greeting, IntervalTrigger(seconds=30), args=[user_id, selected_data, day], id=job_id)
            logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
        except Exception as e:
            logger.error(e)


def schedule_interval_user(user_id, reminder_text, minutes, scheduler):
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç."""
    job_id = f"interval_user_{user_id}"

    if scheduler.get_job(job_id):
        logger.info(f"Task {job_id} already exists. Skipping addition")
        return

    try:
        scheduler.add_job(
            send_reminder_message,
            IntervalTrigger(minutes=minutes),
            args=[user_id, reminder_text],
            id=job_id
        )
        logger.info(f"Success. Task ID {job_id} has been added to scheduler.")
        logger.info(f"Newsletter'{reminder_text}' has been scheduled for {user_id} in {minutes} minutes.")
    except Exception as e:
        logger.error(f"Error. Task ID {job_id} has not been added: {e}")


async def send_reminder_message(user_id, reminder_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        await bot.send_message(chat_id=user_id, text=f"üîî {reminder_text}")
        logger.info(f"Success. Reminder has been sent {user_id}")
    except Exception as e:
        logger.error(f"Error. Reminder has not been sent: {e}")

def schedule_unsubscribe(job_id, scheduler):
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    try:
        scheduler.remove_job(job_id)
    except Exception as e:
        logger.error(e)