# user_handlers.py

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from handlers.notifications import schedule_interval_user
from logger.logging_settings import logger

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

class ReminderState(StatesGroup):
    waiting_for_minutes = State()
    waiting_for_text = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None


def set_scheduler(sched):
    global scheduler
    scheduler = sched


@router.message(Command(commands=['user_remind']))
async def process_user_remind(message: Message, state: FSMContext):
    """–®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª /user_remind")

    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await state.set_state(ReminderState.waiting_for_text)

@router.message(ReminderState.waiting_for_text)
async def process_reminder_text(message: Message, state: FSMContext):
    """–®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è."""
    reminder_text = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–µ–∫—Å—Ç: {reminder_text}")

    await state.update_data(reminder_text=reminder_text)
    await message.answer("‚è≥ –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?")
    await state.set_state(ReminderState.waiting_for_minutes)

@router.message(ReminderState.waiting_for_minutes)
async def process_reminder_time(message: Message, state: FSMContext):
    """–®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É."""
    if not message.text.isdigit():
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç —Ü–∏—Ñ—Ä–∞–º–∏!")
        return

    minutes = int(message.text)
    min_word = get_minutes_word(minutes)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ

    data = await state.get_data()
    reminder_text = data.get("reminder_text", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder_text}' —á–µ—Ä–µ–∑ {minutes} {min_word}.")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    schedule_interval_user(user_id, reminder_text, minutes, scheduler)

    await message.answer(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder_text}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ {minutes} {min_word}!")
    await state.clear()

def get_minutes_word(minutes: int) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–º–∏–Ω—É—Ç–∞'."""
    if 11 <= minutes % 100 <= 14:
        return "–º–∏–Ω—É—Ç"

    last_digit = minutes % 10
    if last_digit == 1:
        return "–º–∏–Ω—É—Ç—É"
    elif last_digit in [2, 3, 4]:
        return "–º–∏–Ω—É—Ç—ã"
    if minutes == 11 or 12 <= minutes <= 20:
        return "–º–∏–Ω—É—Ç"
